dnl vi: set ft=m4
/* -*- C -*-
 *
 * Copyright 2011 Sandia Corporation. Under the terms of Contract
 * DE-AC04-94AL85000 with Sandia Corporation, the U.S.  Government
 * retains certain rights in this software.
 *
 * Copyright (c) 2016 Intel Corporation. All rights reserved.
 * This software is available to you under the BSD license.
 *
 * This file is part of the Sandia OpenSHMEM software package. For license
 * information, see the LICENSE file in the top level directory of the
 * distribution.
 *
 */

/*
 * This is a generated file, do not edit directly.
 */

include(shmem_bind_c.m4)dnl
#include "config.h"

#include <stdio.h>
#include <stdlib.h>

#define SHMEM_INTERNAL_INCLUDE
#include "shmem.h"
#include "shmem_internal.h"
#include "shmem_comm.h"

#ifdef ENABLE_PROFILING
#include "pshmem.h"

define(`SHMEM_PROF_DEF_SWAP',
`#pragma weak shmem_$1_swap = pshmem_$1_swap
#define shmem_$1_swap pshmem_$1_swap
#pragma weak shmemx_ctx_$1_swap = pshmemx_ctx_$1_swap
#define shmemx_ctx_$1_swap pshmemx_ctx_$1_swap')dnl
SHMEM_DEFINE_FOR_EXTENDED_AMO(`SHMEM_PROF_DEF_SWAP')

#if !defined(__cplusplus) && \
    !(defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L)
/* shmem_swap is a special case in the API */
#pragma weak shmem_swap = pshmem_swap
#define shmem_swap pshmem_swap
#endif

define(`SHMEM_PROF_DEF_CSWAP',
`#pragma weak shmem_$1_cswap = pshmem_$1_cswap
#define shmem_$1_cswap pshmem_$1_cswap
#pragma weak shmemx_ctx_$1_cswap = pshmemx_ctx_$1_cswap
#define shmemx_ctx_$1_cswap pshmemx_ctx_$1_cswap')dnl
SHMEM_DEFINE_FOR_AMO(`SHMEM_PROF_DEF_CSWAP')

define(`SHMEM_PROF_DEF_INC',
`#pragma weak shmem_$1_inc = pshmem_$1_inc
#define shmem_$1_inc pshmem_$1_inc
#pragma weak shmemx_ctx_$1_inc = pshmemx_ctx_$1_inc
#define shmemx_ctx_$1_inc pshmemx_ctx_$1_inc')dnl
SHMEM_DEFINE_FOR_AMO(`SHMEM_PROF_DEF_INC')

define(`SHMEM_PROF_DEF_FINC',
`#pragma weak shmem_$1_finc = pshmem_$1_finc
#define shmem_$1_finc pshmem_$1_finc
#pragma weak shmemx_ctx_$1_finc = pshmemx_ctx_$1_finc
#define shmemx_ctx_$1_finc pshmemx_ctx_$1_finc')dnl
SHMEM_DEFINE_FOR_AMO(`SHMEM_PROF_DEF_FINC')

define(`SHMEM_PROF_DEF_ADD',
`#pragma weak shmem_$1_add = pshmem_$1_add
#define shmem_$1_add pshmem_$1_add
#pragma weak shmemx_ctx_$1_add = pshmemx_ctx_$1_add
#define shmemx_ctx_$1_add pshmemx_ctx_$1_add')dnl
SHMEM_DEFINE_FOR_AMO(`SHMEM_PROF_DEF_ADD')

define(`SHMEM_PROF_DEF_FADD',
`#pragma weak shmem_$1_fadd = pshmem_$1_fadd
#define shmem_$1_fadd pshmem_$1_fadd
#pragma weak shmemx_ctx_$1_fadd = pshmemx_ctx_$1_fadd
#define shmemx_ctx_$1_fadd pshmemx_ctx_$1_fadd')dnl
SHMEM_DEFINE_FOR_AMO(`SHMEM_PROF_DEF_FADD')

define(`SHMEM_PROF_DEF_FETCH',
`#pragma weak shmem_$1_fetch = pshmem_$1_fetch
#define shmem_$1_fetch pshmem_$1_fetch
#pragma weak shmemx_ctx_$1_fetch = pshmemx_ctx_$1_fetch
#define shmemx_ctx_$1_fetch pshmemx_ctx_$1_fetch')dnl
SHMEM_DEFINE_FOR_EXTENDED_AMO(`SHMEM_PROF_DEF_FETCH')

define(`SHMEM_PROF_DEF_SET',
`#pragma weak shmem_$1_set = pshmem_$1_set
#define shmem_$1_set pshmem_$1_set
#pragma weak shmemx_ctx_$1_set = pshmemx_ctx_$1_set
#define shmemx_ctx_$1_set pshmemx_ctx_$1_set')dnl
SHMEM_DEFINE_FOR_EXTENDED_AMO(`SHMEM_PROF_DEF_SET')

#endif /* ENABLE_PROFILING */

#define SHMEM_DEF_SWAP(STYPE,TYPE,ITYPE) \
  TYPE shmem_##STYPE##_swap(TYPE *target, TYPE value, int pe)      \
  {                                                                \
    return shmemx_ctx_##STYPE##_swap(target, value, pe,            \
                                     SHMEMX_CTX_DEFAULT);          \
  }                                                                \
  TYPE shmemx_ctx_##STYPE##_swap(TYPE *target, TYPE value, int pe, \
        shmemx_ctx_t c)                                            \
    {                                                              \
        TYPE newval;                                               \
        SHMEM_ERR_CHECK_INITIALIZED();                             \
        SHMEM_ERR_CHECK_PE(pe);                                    \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));           \
        shmem_internal_swap(target, &value, &newval,               \
                            sizeof(TYPE), pe, ITYPE, c);           \
        shmemx_ctx_quiet(c);                                       \
        return newval;                                             \
    }

SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_DEF_SWAP)


#if !defined(__cplusplus) && \
    !(defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L)
/* shmem_swap is a special case in the API */
long
shmem_swap(long *target, long value, int pe)
{
    return shmemx_ctx_swap(target, value, pe, SHMEMX_CTX_DEFAULT);
}
long shmemx_ctx_swap(long *target, long value, int pe, shmemx_ctx_t c)
{
    long newval;

    SHMEM_ERR_CHECK_INITIALIZED();
    SHMEM_ERR_CHECK_PE(pe);
    SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(long));

    shmem_internal_swap(target, &value, &newval, sizeof(long), pe,
        SHM_INTERNAL_LONG,c);
    shmemx_ctx_quiet(c);
    return newval;
}
#endif


#define SHMEM_DEF_CSWAP(STYPE,TYPE,ITYPE) \
    TYPE shmem_##STYPE##_cswap(TYPE *target, TYPE cond, TYPE value,     \
                               int pe)                                  \
    {                                                                   \
        return shmemx_ctx_##STYPE##_cswap(target, cond, value,pe,       \
            SHMEMX_CTX_DEFAULT);                                        \
    }                                                                   \
    void shmemx_##STYPE##_cswap_nbi(TYPE *result, TYPE *target, TYPE cond, TYPE value,     \
                               int pe)                                  \
    {                                                                   \
        shmemx_ctx_##STYPE##_cswap_nbi(result, target, cond, value,pe,       \
            SHMEMX_CTX_DEFAULT);                                        \
    }                                                                   \
    TYPE shmemx_ctx_##STYPE##_cswap(TYPE *target, TYPE cond, TYPE value,\
                               int pe, shmemx_ctx_t c)                  \
    {                                                                   \
        TYPE newval;                                                    \
        shmemx_ctx_##STYPE##_cswap_nbi(&newval, target, cond, value, pe, c); \
        shmemx_ctx_quiet(c); \
        return newval; \
    } \
    void shmemx_ctx_##STYPE##_cswap_nbi(TYPE *result, TYPE *target, TYPE cond, TYPE value,\
                               int pe, shmemx_ctx_t c)                  \
    {                                                                   \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
        shmem_internal_cswap(target, &value, result, &cond,            \
                             sizeof(TYPE), pe, ITYPE, c);               \
    }


SHMEM_DEFINE_FOR_AMO(SHMEM_DEF_CSWAP)

#define SHMEM_DEF_INC(STYPE,TYPE,ITYPE)                                 \
    void shmem_##STYPE##_inc(TYPE *target, int pe)                      \
    {                                                                   \
        shmemx_ctx_##STYPE##_inc(target, pe, SHMEMX_CTX_DEFAULT);       \
    }                                                                   \
    void shmemx_ctx_##STYPE##_inc(TYPE *target, int pe, shmemx_ctx_t c) \
    {                                                                   \
        TYPE tmp = 1;                                                   \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
        shmem_internal_atomic_small(target, &tmp, sizeof(TYPE), pe,     \
                                    SHM_INTERNAL_SUM, ITYPE, c);        \
    }

SHMEM_DEFINE_FOR_AMO(SHMEM_DEF_INC)

#define SHMEM_DEF_FINC(STYPE,TYPE,ITYPE)                                \
    TYPE shmem_##STYPE##_finc(TYPE *target, int pe)                     \
    {                                                                   \
        return shmemx_ctx_##STYPE##_finc(target, pe,                    \
                                         SHMEMX_CTX_DEFAULT);           \
    }                                                                   \
    TYPE shmemx_ctx_##STYPE##_finc(TYPE *target, int pe, shmemx_ctx_t c)\
    {                                                                   \
        TYPE oldval, tmp = 1;                                           \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
        shmem_internal_fetch_atomic(target, &tmp, &oldval, sizeof(TYPE),\
                                    pe, SHM_INTERNAL_SUM, ITYPE, c);    \
        shmemx_ctx_quiet(c);                                            \
        return oldval;                                                  \
    }

SHMEM_DEFINE_FOR_AMO(SHMEM_DEF_FINC)

#define SHMEM_DEF_ADD(STYPE,TYPE,ITYPE)                               \
    void shmem_##STYPE##_add(TYPE *target, TYPE value, int pe)        \
    {                                                                 \
        shmemx_ctx_##STYPE##_add(target, value, pe,                   \
                                 SHMEMX_CTX_DEFAULT);                 \
    }                                                                 \
    void shmemx_ctx_##STYPE##_add(TYPE *target, TYPE value, int pe,   \
                                  shmemx_ctx_t c)                     \
    {                                                                 \
        SHMEM_ERR_CHECK_INITIALIZED();                                \
        SHMEM_ERR_CHECK_PE(pe);                                       \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));              \
                                                                      \
        shmem_internal_atomic_small(target, &value, sizeof(TYPE), pe, \
                                    SHM_INTERNAL_SUM, ITYPE, c);      \
    }


SHMEM_DEFINE_FOR_AMO(SHMEM_DEF_ADD)

#define SHMEM_DEF_FADD(STYPE,TYPE,ITYPE)                             \
    TYPE shmem_##STYPE##_fadd(TYPE *target, TYPE value, int pe)      \
    {                                                                \
        return shmemx_ctx_##STYPE##_fadd(target, value, pe,          \
                                         SHMEMX_CTX_DEFAULT);        \
    }                                                                \
    TYPE shmemx_ctx_##STYPE##_fadd(TYPE *target, TYPE value, int pe, \
                                   shmemx_ctx_t c)                   \
    {                                                                \
        TYPE oldval;                                                 \
        SHMEM_ERR_CHECK_INITIALIZED();                               \
        SHMEM_ERR_CHECK_PE(pe);                                      \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));             \
                                                                     \
        shmem_internal_fetch_atomic(target, &value, &oldval,         \
                                    sizeof(TYPE), pe,                \
                                    SHM_INTERNAL_SUM, ITYPE, c);     \
        shmemx_ctx_quiet(c);                                         \
        return oldval;                                               \
    }

SHMEM_DEFINE_FOR_AMO(SHMEM_DEF_FADD)

#define SHMEM_DEF_FETCH(STYPE,TYPE,ITYPE)                        \
    TYPE shmem_##STYPE##_fetch(const TYPE *source, int pe)       \
    {                                                            \
        return shmemx_ctx_##STYPE##_fetch(source, pe,            \
                                          SHMEMX_CTX_DEFAULT);   \
    }                                                            \
    TYPE shmemx_ctx_##STYPE##_fetch(const TYPE *source, int pe,  \
                                    shmemx_ctx_t c)              \
    {                                                            \
        TYPE val;                                                \
                                                                 \
        SHMEM_ERR_CHECK_INITIALIZED();                           \
        SHMEM_ERR_CHECK_PE(pe);                                  \
        SHMEM_ERR_CHECK_SYMMETRIC(source, sizeof(TYPE));         \
                                                                 \
        shmem_internal_atomic_fetch(&val, (void *) source,       \
                                    sizeof(TYPE), pe, ITYPE, c); \
        shmemx_ctx_quiet(c);                                     \
        return val;                                              \
    }

SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_DEF_FETCH)


#define SHMEM_DEF_SET(STYPE,TYPE,ITYPE)                           \
    void shmem_##STYPE##_set(TYPE *dest, TYPE value, int pe)      \
    {                                                             \
        shmemx_ctx_##STYPE##_set(dest, value, pe,                 \
                                 SHMEMX_CTX_DEFAULT);             \
    }                                                             \
    void shmemx_ctx_##STYPE##_set(TYPE *dest, TYPE value, int pe, \
                                  shmemx_ctx_t c)                 \
    {                                                             \
        SHMEM_ERR_CHECK_INITIALIZED();                            \
        SHMEM_ERR_CHECK_PE(pe);                                   \
        SHMEM_ERR_CHECK_SYMMETRIC(dest, sizeof(TYPE));            \
                                                                  \
        shmem_internal_atomic_set((void *) dest, &value,          \
                                  sizeof(TYPE), pe, ITYPE, c);    \
    }

SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_DEF_SET)

#define SHMEM_DEF_XOR(STYPE,TYPE,ITYPE)                                 \
    void shmemx_##STYPE##_atomic_xor(TYPE *target, TYPE value, int pe)  \
    {                                                                   \
        shmemx_ctx_##STYPE##_atomic_xor(target, value, pe, SHMEMX_CTX_DEFAULT); \
    }                                                                   \
    void shmemx_ctx_##STYPE##_atomic_xor(TYPE *target, TYPE value, int pe, shmemx_ctx_t c)    \
    {                                                                   \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
                                                                        \
        shmem_internal_atomic_small(target, &value, sizeof(TYPE), pe,   \
                                    SHM_INTERNAL_BXOR, ITYPE, c);          \
    }

SHMEM_DEFINE_FOR_BITWISE_AMO(SHMEM_DEF_XOR)

#define SHMEM_DEF_AND(STYPE,TYPE,ITYPE)                                 \
    void shmemx_##STYPE##_atomic_and(TYPE *target, TYPE value, int pe)  \
    {                                                                   \
        shmemx_ctx_##STYPE##_atomic_and(target, value, pe, SHMEMX_CTX_DEFAULT); \
    }                                                                   \
    void shmemx_ctx_##STYPE##_atomic_and(TYPE *target, TYPE value, int pe, shmemx_ctx_t c)    \
    {                                                                   \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
                                                                        \
        shmem_internal_atomic_small(target, &value, sizeof(TYPE), pe,   \
                                    SHM_INTERNAL_BAND, ITYPE, c);          \
    }

SHMEM_DEFINE_FOR_BITWISE_AMO(SHMEM_DEF_AND)

#define SHMEM_DEF_OR(STYPE,TYPE,ITYPE)                                 \
    void shmemx_##STYPE##_atomic_or(TYPE *target, TYPE value, int pe)  \
    {                                                                   \
        shmemx_ctx_##STYPE##_atomic_or(target, value, pe, SHMEMX_CTX_DEFAULT); \
    }                                                                   \
    void shmemx_ctx_##STYPE##_atomic_or(TYPE *target, TYPE value, int pe, shmemx_ctx_t c)    \
    {                                                                   \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
                                                                        \
        shmem_internal_atomic_small(target, &value, sizeof(TYPE), pe,   \
                                    SHM_INTERNAL_BOR, ITYPE, c);          \
    }

SHMEM_DEFINE_FOR_BITWISE_AMO(SHMEM_DEF_OR)

#define SHMEM_DEF_FETCH_XOR(STYPE,TYPE,ITYPE)                                \
    TYPE shmemx_##STYPE##_atomic_fetch_xor(TYPE *target, TYPE value, int pe)  \
    {                                                                   \
        return shmemx_ctx_##STYPE##_atomic_fetch_xor(target, value, pe, SHMEMX_CTX_DEFAULT); \
    }                                                                   \
    TYPE shmemx_ctx_##STYPE##_atomic_fetch_xor(TYPE *target, TYPE value, int pe, shmemx_ctx_t c)    \
    {                                                                   \
        TYPE result; \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
                                                                        \
        shmem_internal_fetch_atomic(target, &value, &result, sizeof(TYPE), pe,   \
                                    SHM_INTERNAL_BXOR, ITYPE, c);          \
        shmemx_ctx_quiet(c); \
        return result; \
    }

SHMEM_DEFINE_FOR_BITWISE_AMO(SHMEM_DEF_FETCH_XOR)

#define SHMEM_DEF_FETCH_AND(STYPE,TYPE,ITYPE)                                \
    TYPE shmemx_##STYPE##_atomic_fetch_and(TYPE *target, TYPE value, int pe)  \
    {                                                                   \
        return shmemx_ctx_##STYPE##_atomic_fetch_and(target, value, pe, SHMEMX_CTX_DEFAULT); \
    }                                                                   \
    TYPE shmemx_ctx_##STYPE##_atomic_fetch_and(TYPE *target, TYPE value, int pe, shmemx_ctx_t c)    \
    {                                                                   \
        TYPE result; \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
                                                                        \
        shmem_internal_fetch_atomic(target, &value, &result, sizeof(TYPE), pe,   \
                                    SHM_INTERNAL_BAND, ITYPE, c);          \
        shmemx_ctx_quiet(c); \
        return result; \
    }

SHMEM_DEFINE_FOR_BITWISE_AMO(SHMEM_DEF_FETCH_AND)

#define SHMEM_DEF_FETCH_OR(STYPE,TYPE,ITYPE)                                 \
    TYPE shmemx_##STYPE##_atomic_fetch_or(TYPE *target, TYPE value, int pe)  \
    {                                                                   \
        return shmemx_ctx_##STYPE##_atomic_fetch_or(target, value, pe, SHMEMX_CTX_DEFAULT); \
    }                                                                   \
    TYPE shmemx_ctx_##STYPE##_atomic_fetch_or(TYPE *target, TYPE value, int pe, shmemx_ctx_t c)    \
    {                                                                   \
        TYPE result; \
        SHMEM_ERR_CHECK_INITIALIZED();                                  \
        SHMEM_ERR_CHECK_PE(pe);                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(target, sizeof(TYPE));                \
                                                                        \
        shmem_internal_fetch_atomic(target, &value, &result, sizeof(TYPE), pe,   \
                                    SHM_INTERNAL_BOR, ITYPE, c);          \
        shmemx_ctx_quiet(c); \
        return result; \
    }

SHMEM_DEFINE_FOR_BITWISE_AMO(SHMEM_DEF_FETCH_OR)
